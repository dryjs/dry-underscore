"use strict";

var fs = require('fs');

/*
require('blanket')({
    pattern: function (filename) {
        return !(new RegExp("node_modules")).test(filename);
    }
});
*/

var _ = require('../');
var join = _.path.join;
var eq = _.test.eq;
var ok = _.test.ok;
var throws = _.test.throws;

var testDir = _.path.normalize(__dirname + "/zandbox/fs-data/");
var testTemplateDir = _.path.normalize(__dirname + "/zandbox/fs-templates/");
var moduleData = _.path.fun(_.path.normalize(__dirname + "/zandbox/module-data/"));

suite('fs');

test('mtime', function(done){
    _.fs.modificationTime(testDir + '/parent/parent.file', function(err, mtime){
        ok(!err);
        ok(mtime);
        done();
    });
});

test('renderFile', function(done){
    _.fs.renderFile(testTemplateDir + '/echo.hb', { data: "hello" }, function(err, result){
        eq(err, null);
        eq(result, "hello\n");
        done();
    });
});

test('renderFile.sync', function(){
    var result = _.fs.renderFile.sync(testTemplateDir + '/echo.hb', { data: "hello" });
    eq(result, "hello\n");
});

test("isDirectory", function(done){

    eq(_.fs.isDirectory.sync(join(testDir, 'parent')), true);
    eq(_.fs.isDirectory.sync(join(testDir, 'does-not-exist')), false);
    eq(_.fs.isDirectory.sync(join(testDir, 'parent/child/child.file')), false);

    var err = null;
    var isDir = false;

    await{ _.fs.isDirectory(join(testDir, 'parent'), defer(err, isDir)); }
    if(err){ throw(err); }
    eq(isDir, true);

    await{ _.fs.isDirectory(join(testDir, 'parent/child/child.file'), defer(err, isDir)); }
    if(err){ throw(err); }
    eq(isDir, false);
 
    await{ _.fs.isDirectory(join(testDir, 'does-not-exist'), defer(err, isDir)); }
    if(err){ throw(err); }
    eq(isDir, false);
 
    done();
});

test("isFile", function(done){

    eq(_.fs.isFile.sync(join(testDir, 'parent')), false);
    eq(_.fs.isFile.sync(join(testDir, 'does-not-exist')), false);
    eq(_.fs.isFile.sync(join(testDir, 'parent/child/child.file')), true);

    var err = null;
    var isFile = false;

    await{ _.fs.isFile(join(testDir, 'parent'), defer(err, isFile)); } 
    if(err){ throw(err); }
    eq(isFile, false);

    await{ _.fs.isFile(join(testDir, 'parent/child/child.file'), defer(err, isFile)); }
    if(err){ throw(err); }
    eq(isFile, true);
 
    await{ _.fs.isFile(join(testDir, 'does-not-exist'), defer(err, isFile)); }
    if(err){ throw(err); }
    eq(isFile, false);
 
    done();
});

test("moveFile", function(done){
    
    var fileArray = [testDir + 'mv1.txt', testDir + 'mv2.txt', testDir + 'mv3.txt'];

    var destDir = testDir + 'mvtest/';
    
    _.fs.mkdir.sync(destDir);

    var mvArray = [];
    for(var i = 0; i < fileArray.length; i++){
        fs.writeFileSync(fileArray[i], fileArray[i]);
        mvArray.push({src : fileArray[i], dest : destDir  + _.path.file(fileArray[i])});
    }
    
    await{ _.fs.moveFiles(mvArray, defer(err)); }
    if(err){ throw(err); }

    for(i = 0; i < mvArray.length; i++){
        eq(false, _.fs.fileExists.sync(mvArray[i].src));
        eq(fileArray[i], _.fs.readFile.sync(mvArray[i].dest, true));
    }

    _.fs.rmdir.sync(testDir + 'mvtest');

    done();
    
});

test("readFile", function(done){

    eq("parent.file.text", _.fs.readFile.sync(testDir + "parent/parent.file"));
    
    throws(function(){
        eq("parent.file.text", _.fs.readFile.sync(testDir + "parent/parent.file.doesnotexist"));
    });
    
    var err = null;
    var text = null;

    await{ _.fs.readFile(testDir + "parent/parent.file", defer(err, text)); }
    eq(err, null);
    eq("parent.file.text", text);
    
    await{ _.fs.readFile(testDir + "parent/parent.file.doesnotexist", defer(err, text)); }
    ok(err);
    
    done();
});

test("isDirectoryEmpty", function(done){

    _.fs.mkdir.sync(testDir + 'parent/empty/');

    eq(false, _.fs.isDirectoryEmpty.sync(testDir + "parent/"));
    
    eq(true, _.fs.isDirectoryEmpty.sync(testDir + "parent/empty/"));
    
    throws(function(){
        _.fs.isDirectoryEmpty.sync(testDir + "parent/empty/doesntexist");
    });

    var err = null; var empty = null;

    await{ _.fs.isDirectoryEmpty(testDir + "parent/doesntexist", defer(err, empty)); }
    ok(err);
    ok(!empty);
    
    await{ _.fs.isDirectoryEmpty(testDir + "parent/", defer(err, empty)); }
    eq(empty, false);
    
    await{ _.fs.isDirectoryEmpty(testDir + "parent/empty/", defer(err, empty)); }
    eq(empty, true);
    
    done();

});

test("directoryContains", function(done){

    eq(_.fs.directoryContains.sync(testDir + "parent/", "parent.file"), true);
    eq(_.fs.directoryContains.sync(testDir + "parent/", "parent.file", false), true);
    eq(_.fs.directoryContains.sync(testDir + "parent/", "parent.file", true), true);
    eq(_.fs.directoryContains.sync(testDir + "parent/", "Parent.file", true), false);
    eq(_.fs.directoryContains.sync(testDir + "parent/", "Parent.file", false), true);
    eq(_.fs.directoryContains.sync(testDir + "parent/", "parent.file.doesnotexist"), false);
    eq(_.fs.directoryContains.sync(testDir + "parent/", "parent.file.doesnotexist", false), false);
    eq(_.fs.directoryContains.sync(testDir + "parent/", "parent.file.doesnotexist", true), false);
    eq(_.fs.directoryContains.sync(testDir + "parent/", "Parent.file.doesnotexist", true), false);
    eq(_.fs.directoryContains.sync(testDir + "parent/", "parent.file.doesnotexist", false), false);
    
    // --------------------------------------
    
    var err = null; var exists = null;

    await{ _.fs.directoryContains(testDir + "parent/", "parent.file", defer(err, exists)); }
    ok(!err);
    eq(exists, true);
    
    await{ _.fs.directoryContains(testDir + "parent/", "parent.file", false, defer(err, exists)); }
    ok(!err);
    eq(exists, true);
    
    await{ _.fs.directoryContains(testDir + "parent/", "parent.file", true, defer(err, exists)); }
    ok(!err);
    eq(exists, true);
    
    await{ _.fs.directoryContains(testDir + "parent/", "Parent.file", true, defer(err, exists)); }
    ok(!err);
    eq(exists, false);
    
    await{ _.fs.directoryContains(testDir + "parent/", "Parent.file", false, defer(err, exists)); }
    ok(!err);
    eq(exists, true);
    
    await{ _.fs.directoryContains(testDir + "parent/", "parent.file.doesnotexist", defer(err, exists)); }
    eq(exists, false);
    ok(!err);
    
    await{ _.fs.directoryContains(testDir + "parent/", "parent.file.doesnotexist", false, defer(err, exists)); }
    eq(exists, false);
    ok(!err);
    
    await{ _.fs.directoryContains(testDir + "parent/", "parent.file.doesnotexist", true, defer(err, exists)); }
    eq(exists, false);
    ok(!err);
    
    await{ _.fs.directoryContains(testDir + "parent/", "Parent.file.doesnotexist", true, defer(err, exists)); }
    eq(exists, false);
    ok(!err);
    
    await{ _.fs.directoryContains(testDir + "parent/", "parent.file.doesnotexist", false, defer(err, exists)); }
    eq(exists, false);
    ok(!err);
    
    done();
});

test("findInParents", function(done){
        
    eq(testDir + "parent", _.fs.findInParents.sync(testDir + "parent/child/child.directory/", "parent.file"));
    eq(testDir + "parent", _.fs.findInParents.sync(testDir + "parent/child/child.directory/", "child"));
    
    eq("", _.fs.findInParents.sync(testDir + "parent/child/child.directory/", "parent.file.doesnotexist"));
        
    throws(function(){
        eq("", _.fs.findInParents.sync(testDir + "parent/child/child.directory/doesntexist/", "parent.file.doesnotexist"));
    });
    
    var err = null; var path = null;
    await{ _.fs.findInParents(testDir + "parent/child/child.directory/doesntexist/", "parent.file", defer(err, path)); }
    ok(err);
    eq(undefined, path);
        
    await{ _.fs.findInParents(testDir + "parent/child/child.directory/", "parent.file", defer(err, path)); }
    ok(!err);
    eq(testDir + "parent/", path);
    
    await{ _.fs.findInParents(testDir + "parent/child/child.directory/", "child", defer(err, path)); }
    ok(!err);
    eq(testDir + "parent/", path);
 
    await{ _.fs.findInParents(testDir + "parent/child/child.directory/", "parent.file.doesnotexist", defer(err, path)); }
    ok(!err);
    eq(path, "");
    
    done();
});

test("fileExists", function(done){
    
    eq(true, _.fs.fileExists.sync(testDir + "parent/parent.file"));
    eq(false, _.fs.fileExists.sync(testDir + "parent"));
    eq(false, _.fs.fileExists.sync(testDir + "parent/parent.file.doesnotexist"));
    
    var err = null; var exists = null;
    await{ _.fs.fileExists(testDir + "parent/parent.file", defer(err, exists)); }
    ok(!err);
    eq(true, exists);
    
    await{ _.fs.fileExists(testDir + "parent", defer(err, exists)); }
    ok(!err);
    eq(false, exists);
    
    await{ _.fs.fileExists(testDir + "parent/parent.file.doesnotexist", defer(err, exists)); }
    ok(!err);
    eq(false, exists);
    
    done(); 
});


test("dirExists", function(done){

    eq(true, _.fs.directoryExists.sync(testDir + "parent"));
    eq(false, _.fs.directoryExists.sync(testDir + "parent/parent.file"));
    eq(false, _.fs.directoryExists.sync(testDir + "parent/parent.file.doesnotexist"));
    
    var err = null; var exists = null;
    await{ _.fs.directoryExists(testDir + "parent", defer(err, exists)); }
    ok(!err);
    eq(true, exists);
    
    await{ _.fs.directoryExists(testDir + "parent/parent.file", defer(err, exists)); }
    ok(!err);
    eq(false, exists);
    
    await{ _.fs.directoryExists(testDir + "parent/parent.file.doesnotexist", defer(err, exists)); }
    ok(!err);
    eq(false, exists);
    
    done();
});

test("readDir", function(done){
    var n = 0;

    eq(['child', 'empty', 'parent.file'], _.fs.readDir.sync(testDir + "parent"));

    throws(function(){
        eq([], _.fs.readDir.sync(testDir + "parent/parent.file"));
    });

    throws(function(){
        eq([], _.fs.readDir.sync(testDir + "parent/parent.file.doesnotexist"));
    });
    
    var err = null; var names = null;
    await{ _.fs.readDir(testDir + "parent", defer(err, names)); }
    ok(!err);
    eq(['child', 'empty', 'parent.file'], names);
    
    await{ _.fs.readDir(testDir + "parent/parent.file", defer(err, names)); }
    ok(err);
    eq(undefined, names);
    
    await{ _.fs.readDir(testDir + "parent/parent.file.doesnotexist", defer(err, names)); }
    ok(err);
    eq(undefined, names);
    
    eq([],
        _.difference(
            [testDir + 'parent/' + 'parent.file', testDir + 'parent/' + 'child', testDir + 'parent/' + 'empty'], 
            _.fs.readDir.sync(testDir + "parent", { fullPath: true })
        )
    );
    
    throws(function(){
        eq([], _.fs.readDir.sync(testDir + "parent/parent.file", { fullPath: true }));
    });

    throws(function(){
        eq([], _.fs.readDir.sync(testDir + "parent/parent.file.doesnotexist", { fullPath: true }));
    });
    
    await{ _.fs.readDir(testDir + "parent", { fullPath: true }, defer(err, names)); }
    ok(!err);
    eq([], _.difference([testDir + 'parent/' + 'parent.file', testDir + 'parent/' + 'child', testDir + 'parent/' +'empty'], names));
    
    await{ _.fs.readDir(testDir + "parent/parent.file", { fullPath: true }, defer(err, names)); }
    ok(err);
    eq(undefined, names);
    
    await{ _.fs.readDir(testDir + "parent/parent.file.doesnotexist", { fullPath: true }, defer(err, names)); }
    ok(_.code.noent(err));
    eq(undefined, names);

    done();

});

test("mkdir rmdir", function(done){

    _.fs.rmdir.sync(testDir + 'sync');
    _.fs.rmdir.sync(testDir + 'async');

    _.fs.mkdir.sync(testDir + 'sync/make/tree/');
    eq(true, _.fs.exists.sync(testDir + 'sync/make/tree/'));

    _.fs.rmdir.sync(testDir + 'sync');
    eq(false, _.fs.exists.sync(testDir + 'sync'));    

    var err = null;

    await{ _.fs.mkdir(testDir + 'async/make/tree/', defer(err)); }
    eq(true, _.fs.exists.sync(testDir + 'async/make/tree'));
    ok(!err);

    await{ _.fs.rmdir(testDir + 'async', defer(err)); }
    eq(false, _.fs.exists.sync(testDir + 'async'));
    ok(!err);
    
    await{ _.fs.mkdir(testDir + 'parent/child/', defer(err)); }
    ok(!err);
    
    done();
});

test("directories", function(done){
    var n = 0;

    eq([], _.difference([testDir + 'parent/' + 'child', testDir + 'parent/' + 'empty'], _.fs.directories.sync(testDir + "parent")));

    throws(function(){
        eq([], _.fs.directories.sync(testDir + "parent/parent.file"));
    });

    throws(function(){
        eq([], _.fs.directories.sync(testDir + "parent/parent.file.doesnotexist"));
    });
    
    var err = null; var names = null;
    await{ _.fs.directories(testDir + "parent", defer(err, names)); }
    ok(!err);
    eq([], _.difference([testDir + 'parent/' + 'child', testDir + 'parent/' + 'empty'], names));
    
    await{ _.fs.directories(testDir + "parent/parent.file", defer(err, names)); }
    ok(_.code.notdir(err));
    eq(undefined, names);
    
    await{ _.fs.directories(testDir + "parent/parent.file.doesnotexist", defer(err, names)); }
    ok(_.code.noent(err));
    eq(undefined, names);
    
    
    eq(['child', 'empty'], _.fs.directories.sync(testDir + "parent", false));

    throws(function(){
        eq([], _.fs.directories.sync(testDir + "parent/parent.file", false));
    });

    throws(function(){
        eq([], _.fs.directories.sync(testDir + "parent/parent.file.doesnotexist", false));
    });
    
    await{ _.fs.directories(testDir + "parent", defer(err, names), false); }
    ok(!err);
    eq(['child', 'empty'], names);
    
    await{ _.fs.directories(testDir + "parent/parent.file", defer(err, names)); }
    ok(_.code.notdir(err));
    eq(undefined, names);
    
    await{ _.fs.directories(testDir + "parent/parent.file.doesnotexist", defer(err, names)); }
    ok(_.code.noent(err));
    eq(undefined, names);
 
    done();
});

test("files", function(done){
    var n = 0;

    eq([testDir + 'parent/parent.file'], _.fs.files.sync(testDir + "parent"));
    
    throws(function(){
        eq([], _.fs.files.sync(testDir + "parent/parent.file"));
    });

    throws(function(){
        eq([], _.fs.files.sync(testDir + "parent/parent.file.doesnotexist"));
    });
    
    var err = null; var names = null;

    await{ _.fs.files(testDir + "parent", defer(err, names)); }
    ok(!err);
    eq([testDir + 'parent/parent.file'], names);
    
    await{ _.fs.files(testDir + "parent/parent.file", defer(err, names)); }
    ok(_.code.notdir(err));
    eq(undefined, names);
    
    await{ _.fs.files(testDir + "parent/parent.file.doesnotexist", defer(err, names)); }
    ok(_.code.noent(err));
    eq(undefined, names);
 
    eq(['parent.file'], _.fs.files.sync(testDir + "parent", false));
    throws(function(){
        eq([], _.fs.files.sync(testDir + "parent/parent.file", false));
    });

    throws(function(){
        eq([], _.fs.files.sync(testDir + "parent/parent.file.doesnotexist", false));
    });
    
    await{ _.fs.files(testDir + "parent", defer(err, names), false); }
    ok(!err);
    eq(['parent.file'], names);
    
    await{ _.fs.files(testDir + "parent/parent.file", defer(err, names), false); }
    ok(_.code.notdir(err));
    eq(undefined, names);
    
    await{ _.fs.files(testDir + "parent/parent.file.doesnotexist", defer(err, names), false); }
    ok(_.code.noent(err));
    eq(undefined, names);
    
    done();
});

test("walk", function(done){

    /*
    ./parent
    ./parent/child
    ./parent/child/child.directory
    ./parent/child/child.directory/child.directory.file
    ./parent/child/child.directory/parent
    ./parent/child/child.directory/parent/.keep
    ./parent/child/child.file
    ./parent/empty
    ./parent/parent.file
    */
    
    var relativePaths = [
        './parent',
        './parent/child',
        './parent/child/child.directory',
        './parent/child/child.directory/child.directory.file',
        './parent/child/child.directory/parent',
        './parent/child/child.directory/parent/.keep',
        './parent/child/child.file',
        './parent/empty',
        './parent/parent.file'
    ];

    var expectedPaths = _.map(relativePaths, function(val){ return(_.path.normalize(testDir + val)); });
    var foundPaths = []; 

    _.fs.walk.sync(testDir, function onFile(fileName, filePath){
        if(fileName == "mv1.txt" || fileName == "mv2.txt" || fileName == "mv3.txt"){ return(false); }
        foundPaths.push(filePath);
    }, function onDir(dirName, dirPath){
        if(dirName == "mvtest" || dirName == "async"){ return(false); }
        foundPaths.push(dirPath);
    });

    _.each(expectedPaths, function(val){
        eq([val], _.filter(foundPaths, function(found){ return(found === val); }));
        foundPaths = _.reject(foundPaths, function(found){ return(found === val); });
    });

    eq(foundPaths.length, 0);

    _.fs.walk(testDir, function onFile(fileName, filePath, next){
        if(fileName == "mv1.txt" || fileName == "mv2.txt" || fileName == "mv3.txt"){ return next(false); }
        foundPaths.push(filePath);
        next();
    }, function onDir(dirName, dirPath, next){
        if(dirName == "mvtest" || dirName == "async"){ return next(false); }
        foundPaths.push(dirPath);
        next();
    }, function(err){
        if(err){ throw(err); }

        _.each(expectedPaths, function(val){
            eq([val], _.filter(foundPaths, function(found){ return(found === val); }));
            foundPaths = _.reject(foundPaths, function(found){ return(found === val); });
        });
        eq(foundPaths.length, 0);
        done();
    });
});

test('find', function(done){

    /*
    ./parent
    ./parent/child
    ./parent/child/child.directory
    ./parent/child/child.directory/child.directory.file
    ./parent/child/child.directory/parent
    ./parent/child/child.directory/parent/.keep
    ./parent/child/child.file
    ./parent/empty
    ./parent/parent.file
    */
    
    var relativePaths = [
        //'./parent',
        //'./parent/child',
        //'./parent/child/child.directory',
        './parent/child/child.directory/child.directory.file',
        //'./parent/child/child.directory/parent',
        //'./parent/child/child.directory/parent/.keep',
        './parent/child/child.file',
        //'./parent/empty',
        './parent/parent.file'
    ];

    var expectedPaths = _.map(relativePaths, function(val){ return(_.path.normalize(testDir + val)); });
    var foundPaths = []; 

    var foundPaths = _.fs.find.sync(testDir, "*.file");

    _.each(expectedPaths, function(val){
        eq([val], _.filter(foundPaths, function(found){ return(found === val); }));
        foundPaths = _.reject(foundPaths, function(found){ return(found === val); });
    });

    eq(foundPaths.length, 0);

    foundPaths = _.fs.find.sync(testDir, { pattern: "*.file", prune: function(dirName){ return(dirName === 'child'); } });

    var prunedExpected = [_.path.normalize(testDir + './parent/parent.file')];

    _.each(prunedExpected, function(val){
        eq([val], _.filter(foundPaths, function(found){ return(found === val); }));
        foundPaths = _.reject(foundPaths, function(found){ return(found === val); });
    });

    eq(foundPaths.length, 0);

    _.fs.find(testDir, "*.file", function(err, foundFiles){

        _.each(expectedPaths, function(val){
            eq([val], _.filter(foundFiles, function(found){ return(found === val); }));
            foundFiles = _.reject(foundFiles, function(found){ return(found === val); });
        });

        eq(foundFiles.length, 0);
        done();
    });
});


test('fetchModule', function(done){

    var err = null;
    var mod = null;

    // await{ _.fs.module(moduleData("bad", "bad-global.tjs"), defer(var err, mod)); }

    await{ _.fs.module(moduleData("not-there", "not-there.tjs"), defer(err, mod)); }
    eq(err, null);
    eq(mod, null);

    await{ _.fs.module(moduleData("bad", "bad-global.tjs"), defer(err, mod)); }
    ok(err);
    eq(mod, undefined);

    await{ _.fs.module(moduleData("bad", "bad-relative.tjs"), defer(err, mod)); }
    ok(err);
    eq(mod, undefined);

    await{ _.fs.module(moduleData("bad", "bad-abs.tjs"), defer(err, mod)); }
    ok(err);
    eq(mod, undefined);

    await{ _.fs.module(moduleData("bad"), defer(err, mod)); }
    eq(err, null);
    eq(mod, null);

    await{ _.fs.module(moduleData("badpath"), defer(err, mod)); }
    eq(err, null);
    eq(mod, null);
    
    await{ _.fs.module("badpath", defer(err, mod)); }
    eq(err, null);
    eq(mod, null);

    await{ _.fs.module(moduleData("good", "one.tjs"), defer(err, mod)); }
    eq(err, null);
    eq(mod, {one:'one'});

    await{ _.fs.module(moduleData("good", "two.js"), defer(err, mod)); }
    eq(err, null);
    eq(mod, {two:'two'});

    done();

});

test('fetchModules', function(done){

    var err = null;
    var mods = null;

    await{ _.fs.modules(moduleData("good"), defer(err, mods), ['js', 'tjs']); }
    eq(err, null);
    eq(mods.length, 2);

    mods = _.map(mods, function(m){ return(m.module); });
    if(!mods[0].one){ 
        var temp = mods[0];
        mods[0] = mods[1];
        mods[1] = temp;
    }
    eq(mods, [{one:'one'}, {two:'two'}]);

    done();
});

