var nativeFs = require('fs');
var minimatch = require('minimatch');

function lib(_){

var fs = {};

fs.path = require('path');

fs.glob = {};
fs.glob.matchFile = function(path, glob, options){
    return(minimatch(path, glob, _.extend({ matchBase: true, nonegate: true}, options)));
};

fs.glob.matchPath = function(path, glob, options){
    return(minimatch(path, glob, _.extend({nonegate: true}, options)));
};

fs.isHidden = function(path){ return(fs.path.basename(path)[0] === "."); };

fs.moveFiles = function(filePaths, callback){
    var error = false;
    
    await {
        // takes array or object
        for(p in filePaths){
            if(filePaths.hasOwnProperty(p)){
                (function(filePath, cb){
                    await { nativeFs.rename(filePath.Src, filePath.Dest, defer(var err)); }
                    if(err){ error = true; throw (err); }
                    else{ cb(); }
                })(filePaths[p], defer());
            }
        }
    }
    if(!error){ if(callback) { callback(); }}
};

fs.modificationTime = function(filePath, callback){
    nativeFs.stat(filePath, function(err, stats){
        if(err){ callback(null); }
        else{ callback(stats.mtime.getTime()); }
    });
};

fs.writeFile = function(filePath, text, callback){
    if(callback){
        nativeFs.writeFile(filePath, text, callback);
    }else{
        nativeFs.writeFileSync(filePath, text);
    }
};

fs.readJsonFile = function(path, callback){
    _.fs.getFileText(path, function(text){
        if(text){ 
            try{ callback(JSON.parse(text)); }
            catch(e){ console.error(e); console.dir(e); callback(null); }
        }else{ callback(null); }
    }, true);
};
 
fs.evalFile = function(path, callback){
    
    if(callback){

        _.fs.getFileText(path, function(data){
            if(data !== ""){
                try{ var evalData = eval("(" + data + ")"); }
                catch(e){ console.error("There was a problem with the file: " + path + " Error:" + e.message); throw(e); }
            }
            callback(evalData);
        });

    }else{
        
        var data = _.fs.getFileText(path);
        var evalData = null;

        if(data !== ""){
            try{ evalData = eval("(" + data + ")"); }
            catch(e){ console.error("There was a problem with the file: " + path + " Error:" + e.message); throw(e); }
        }
        
        return(evalData);                
    }
};

fs.renderFile = function(path, hash, callback){
    fs.getFileText(path, function(text){
        if(text != null){ callback(_.render(text, hash)); }
        else{ callback(null); }
    }, true);
};

fs.renderFolder = function(src, dest, hash, ignoreFile, processFileName, callback){
    src = _.fs.addSlash(src);
    dest = _.fs.addSlash(dest);
    // console.log(src);
    //console.log(dest);

    await {
        _.fs.getFiles(src, defer(var files));
        _.fs.makeTree(dest, defer());
    } 

    _.eachAsync(files, function(file, index, next){
        var newFileName = _.fs.getFileName(file);
        // ignore hidden files

        if(ignoreFile(newFileName)){ return next(); }

        var muMatch = new RegExp("\.mu$");
        if(file.match(muMatch)){
            // render template         
            var templatePath = file.replace(muMatch, "");
            newFileName = _.fs.getFileName(templatePath);

            newFileName = processFileName(newFileName);

            fs.renderFile(templatePath, hash, function(str){
                fs.writeFile(dest + newFileName, str, function(err){
                    if(err){throw(err);}
                    next();
                });
            });

        }else{
            // copy file
            newFileName = _.fs.getFileName(file);
            _.fs.getFileText(file, function(str){
                fs.writeFile(dest + newFileName, str, function(err){
                    if(err){throw(err);}
                    next();
                });
            });
        }

    }, function(){
        _.fs.getDirectoryNames(src, function(dirs){
            _.eachAsync(dirs, function(dir, index, next){
                _.fs.makeTree(dest + dir, function(){
                    fs.renderFolder(src + dir, dest + dir, hash, ignoreFile, processFileName, function(){
                        next();
                    });
                });
            }, callback);
        });
    });
};

fs.getFileText = function(filePath, callback, returnNullOnError){
    if(_.isBoolean(callback)){ returnNullOnError = callback; callback = null; }

    if(callback){
	nativeFs.readFile(filePath, 'utf8', function(err, str){
	    if(err){ 
                if(returnNullOnError){ callback(null); }
                else{ callback(""); }
            }else{ callback(str); }
	});
    }else{
	try{ var text = nativeFs.readFileSync(filePath, 'utf8'); }
	catch(e){
            if(returnNullOnError){ return(null); }
            else{ return(""); }
        }
        return(text);
    }
}

fs.directoryIsEmpty = function(path, ignore, callback){
    if(ignore === undefined){
	ignore = [];
    }else if(typeof(ignore) === 'function'){
	callback = ignore;
	ignore = [];
    }
    if(callback){
	fs.getFileAndFolderNames(path, function(contents){
	    for(var i = 0; i < contents.length; i++){
		if(!_.exists(ignore, contents[i], true)){
		    callback(false);
		    return;
		}
	    }
	    callback(true);
	});
    }else{
	var contents = fs.getFileAndFolderNames(path);
	for(var i = 0; i < contents.length; i++){
	    if(!_.exists(ignore, contents[i], true)){
		return(false);
	    }
	}
	return(true);
    }
};

fs.directoryContains = function(path, name, caseSensitive, callback){
    if(typeof(caseSensitive) === 'function'){
	callback = caseSensitive;
	caseSensitive = undefined;
    }
    caseSensitive = caseSensitive || false;
    
    if(!caseSensitive){name = name.toLowerCase();}
    
    if(callback){
	fs.getFileAndFolderNames(path, function(contents){
	    for(var i = 0; i < contents.length; i++){
		if(contents[i] === name){
		    callback(true);
		    return;
		}
	    }
	    callback(false);
	});
    }else{
	var contents = fs.getFileAndFolderNames(path);
	for(var i = 0; i < contents.length; i++){
	    if(contents[i] === name){
		return(true);
	    }
	}
	
	return(false);
    }
};

fs.findFileInParents = function(childDirectory, fileName, callback){
    
    var currentPath = fs.addSlash(childDirectory);
    
    if(callback){

	if(currentPath === ""){

	    callback("");

	}else{
	
	    fs.directoryContains(currentPath, fileName, function(doesExist){
		if(doesExist){
		    callback(currentPath);
		}else{
		    var currentPathSplit = currentPath.split('/');
		    var p = currentPathSplit.pop();
		    if(p === ""){
			p = currentPathSplit.pop();
		    }
		    currentPath = currentPathSplit.join('/');
		    fs.findFileInParents(currentPath, fileName, callback);
		}
		
	    });
	}
    }else{
	while(!fs.directoryContains(currentPath, fileName)){
	
	    var currentPathSplit = currentPath.split('/');
	    
	    currentPathSplit.pop();
	    currentPath = currentPathSplit.join('/');
	    
	    if(currentPath === ""){ return(""); }
	}
    
	return(currentPath);
    }
}

fs.findDirectoryInChildren = function(parentDirectory, dirName, callback){
    parentDirectory = fs.addSlash(parentDirectory);
    
    var found = [];
    
    if(callback){
	
	fs.getDirectoryNames(parentDirectory, function(childDirs){
	    var currentPath = "";
	
	    _.eachAsync(childDirs, function(dir, index, next){
		currentPath = parentDirectory + dir;
		
		if(dir === dirName){
		    found.push(currentPath);
		}
		
		fs.findDirectoryInChildren(currentPath, dirName, function(dirs){
		    found = found.concat(dirs);
		    next();		    
		});
		
	    }, function(){
		callback(found);
	    });
	});
	
    }else{
    
	var childDirs = fs.getDirectoryNames(parentDirectory);
	var currentPath = "";
	
	for(var i= 0; i < childDirs.length; i++){
	    currentPath = parentDirectory + childDirs[i];
    
	    if(childDirs[i] === dirName){
		found.push(currentPath);
	    }
    
	    found = found.concat(fs.findDirectoryInChildren(currentPath, dirName));
	}
	
	return(found);
    }
};


fs.exists = function (d, callback) {
    if(callback){
	nativeFs.stat(d, function(err, stats){
	    if(err || !stats){
		callback(false);
	    }else{
		callback(true);
	    }
	});
    }else{
	try { return(nativeFs.statSync(d) !== null); }
	catch (er) { return false; }
    }
};

fs.fileExists = function (d, callback) {

    if(callback){
	nativeFs.stat(d, function(err, stats){
	    if(err){ callback(false); }
	    else{ callback(!(stats.isDirectory())); }
	});
    }else{
	try { return(!(nativeFs.statSync(d).isDirectory())); }
	catch (er) { return false; }
    }
};


fs.isDirectory = function(path, callback){
    if(callback){
	fs.directoryExists(path, callback);
    }else{
	return(fs.directoryExists(path));
    }
};

// was dirExists
fs.directoryExists = function (d, callback) {
    if(callback){
	nativeFs.stat(d, function(err, stats){
	    if(err){ callback(false); }
	    else{ callback(stats.isDirectory()); }
	});
    }else{
	try { return(nativeFs.statSync(d).isDirectory()); }
	catch (er) { return false; }
    }
};

fs.getFileAndFolderNames = function(path, callback){
    if(callback){
	nativeFs.readdir(path, function(err, contents){
	    if(err){
		callback([]);
	    }else{
		callback(contents);
	    }
	});
    }else{
        try{
            return(nativeFs.readdirSync(path));
        }catch(e){
            throw(e);
        }
    }
};

fs.walk = function(path, onFile, onDir, callback){
    if(callback){
        fs.getFiles(path, function(files){
            _.eachAsync(files, function(file, index, next){
                onFile(fs.path.basename(file), file, next);
            }, function(){
                fs.getDirectories(path, function(dirs){
                    _.eachAsync(dirs, function(dir, index, next){
                        onDir(fs.path.basename(dir), dir, function(recurse){
                            if(recurse !== false){
                                fs.walk(dir, onFile, onDir, next);
                            }else{
                                next();
                            }
                        });
                    }, function(){
                        if(callback){ callback(); }
                    });
                });
            });
        });
    }else{
        var files = fs.getFiles(path);
        _.each(files, function(file){
            onFile(fs.path.basename(file), file);
        });

        var dirs = fs.getDirectories(path);
        _.each(dirs, function(dir){
            if(onDir(fs.path.basename(dir), dir) !== false){
                fs.walk(dir, onFile, onDir);
            }
        });
    }
};

fs.find = function(path, glob, callback){
    if(_.isFunction(glob)){
        callback = glob;
        glob = "*";
    }

    fs.walk(path, function(files){ });
};

fs.getFilesAndFolders = function(path, callback){
    if(callback){
	fs.getFiles(path, function(files){
	    fs.getDirectories(path, function(dirs){
		callback(files.concat(dirs));
	    });
	});
    }else{
	var files = fs.getFiles(path);
	files = files.concat(fs.getDirectories(path));
	return(files);
    }
};

fs.makeTree = function(path, mode, callback){
    
    path = fs.addSlash(path);
    
    if(typeof(mode) === 'function'){
        callback = mode;
        mode = null;
    }
    
    mode = mode || '755';
    
    path = fs.path.normalize(path);
    
    if(callback){
        fs.exists(path, function(exists){
            if(!exists){

                var pathSplit = path.split("/");
        
                if(pathSplit.pop() === ""){ pathSplit.pop();}
        
                fs.makeTree(fs.addSlash(pathSplit.join("/")), mode, function(){
                    nativeFs.mkdir(path, mode, callback);
                });
            
            }else{
                callback();
            }
        });
    }else{
        if(!fs.exists(path)){
            var pathSplit = path.split("/");
        
            if(pathSplit.pop() === ""){ pathSplit.pop();}
        
            fs.makeTree(fs.addSlash(pathSplit.join("/")), mode);
            
            nativeFs.mkdirSync(path, mode);
        }
    }
};

fs.deleteFile = function(path, callback){
    if(callback){
        nativeFs.unlink(path, function(err){ 
            if(err){ console.dir(err); }
            callback();
        });
    }else{
        try{ nativeFs.unlinkSync(path); }
        catch(e){ console.dir(e); }
    }
};

fs.removeTree = function(path, callback){
    path = fs.addSlash(path);

    if(typeof(callback) === 'function'){
        
        fs.getDirectories(path, function(folders){
            _.eachAsync(folders, function(folder, index, next){
            
                nativeFs.lstat(folder, function(e, stat){
                    if(stat.isSymbolicLink()){
                        nativeFs.unlink(folder, function(){
                            next();
                        });
                    }else{
                        fs.removeTree(folder, function(){
                            next();
                        });
                    }
                });
            }, function(){
                fs.getFiles(path, function(files){
                    _.eachAsync(files, function(file, index, next){
                        nativeFs.unlink(file, function(err){
                            if(err){throw(err);}
                            next(); 
                        });
                    }, function(){
                        nativeFs.rmdir(path, function(err){
                            if(err){throw(err);}
                            callback();
                        });
                    });
                });
            });
        });

    }else{

        if(!fs.exists(path)){ return; }
	
        var files = fs.getFileAndFolderNames(path);
        
        for(var i = 0; i < files.length; i++){
            var currentPath = fs.path.join(path, files[i]);
            
            var stat = nativeFs.lstatSync(currentPath);

            if(stat.isSymbolicLink() || !stat.isDirectory()){
                nativeFs.unlinkSync(currentPath);
            }else{
                fs.removeTree(currentPath);
            }
        }

        nativeFs.rmdirSync(path);
    }
};

fs.copyFileSync = function(srcFile, destFile){
    var BUF_LENGTH, buff, bytesRead, fdr, fdw, pos;
    BUF_LENGTH = 64 * 1024;
    buff = new Buffer(BUF_LENGTH);
    fdr = nativeFs.openSync(srcFile, 'r');
    fdw = nativeFs.openSync(destFile, 'w');
    bytesRead = 1;
    pos = 0;
    while (bytesRead > 0) {
        bytesRead = nativeFs.readSync(fdr, buff, 0, BUF_LENGTH, pos);
        nativeFs.writeSync(fdw, buff, 0, bytesRead);
        pos += bytesRead;
    }
    nativeFs.closeSync(fdr);
    return nativeFs.closeSync(fdw);
};

fs.getDirectories = function(path, callback){
    
    if(callback){
	fs.getDirectoryNames(path, function(dirNames){
	   for(var i = 0; i < dirNames.length; i++){
		dirNames[i] = fs.addSlash(path) + dirNames[i];
	   }
	   
	   callback(dirNames);
	});
        
    }else{
	
	var dirNames = fs.getDirectoryNames(path);
	
	for(var i = 0; i < dirNames.length; i++){
	     dirNames[i] = fs.addSlash(path) + dirNames[i];
	}
	
	return(dirNames);	
    }
};

fs.getDirectoryContentsAndFilter = function(path, callback, dirs){
    
    var directories = [];
    
    if(callback){
	
	fs.getFileAndFolderNames(path, function(files){
	    _.eachAsync(files, function(file, index, next){

		var filePath = path + "/" + file;
		
		fs.isDirectory(filePath, function(isDir){
		    if((dirs && isDir) || (!dirs && !isDir)){
			directories.push(file);
		    }
		    next();
		});
		
	    }, function(){
		callback(directories);		
	    });
	});

    }else{
	
	var files = fs.getFileAndFolderNames(path);
        
	for(var i = 0; i < files.length; i++){
	    var filePath = path + "/" + files[i];
	    var isDir = fs.isDirectory(filePath);
	    
	    if((dirs && isDir) || (!dirs && !isDir)){
		directories.push(files[i]);
	    }
	}
	return(directories);
    }
};

fs.getDirectoryNames = function(path, callback){
    if(callback){
	fs.getDirectoryContentsAndFilter(path, callback, true);
    }else{
	return(fs.getDirectoryContentsAndFilter(path, null, true));
    }
};

fs.getFileNames = function(path, callback){
    if(callback){
	fs.getDirectoryContentsAndFilter(path, callback, false);
    }else{
	return(fs.getDirectoryContentsAndFilter(path, null, false));
    }
};

fs.getFiles = function(path, callback){
    
    if(callback){
	fs.getFileNames(path, function(fileNames){
	   for(var i = 0; i < fileNames.length; i++){
		fileNames[i] = fs.addSlash(path) + fileNames[i];
	   }
	   
	   callback(fileNames);
	});
        
    }else{
	
	var fileNames = fs.getFileNames(path);
	
	for(var i = 0; i < fileNames.length; i++){
	     fileNames[i] = fs.addSlash(path) + fileNames[i];
	}
	
	return(fileNames);	
    }
};

fs.getFolderContentInfo = function getFolderContentInfo(path, recursive, callback, filter, processInfo){
    if(typeof(recursive) === 'function'){
        callback = recursive;
        recursive = false;
    }

    if(!filter){ filter = function(){return(true);}; }
    if(!processInfo){ processInfo = function(){}; }
    
    var contents = [];
    
    await { nativeFs.readdir(path, defer(var err, files)); }
    if(err){ throw(err); }
    
    await {
        for(var i = 0; i < files.length; i++){
            (function(file, cb){
                if(filter(file)){
                    await { nativeFs.stat(fs.path.join(path, file), defer(var err, stats));}
                    if(err){throw(err);}
                    var info = "";
                    if(recursive && stats.isDirectory() ){
                        await{ getFolderContentInfo(fs.path.join(path, file), recursive, defer(var recursiveInfo), filter, processInfo); }
                        info = { FileName : file, FilePath : fs.path.join(path, file), IsDirectory : stats.isDirectory(), Contents: recursiveInfo, MTime : stats.mtime, stats: stats};
                    }else{
                        info = { FileName : file, FilePath : fs.path.join(path, file), IsDirectory : stats.isDirectory(), MTime : stats.mtime, stats: stats};
                    }
                    processInfo(info);
                    contents.push(info);
                }

                cb();
            })(files[i], defer());
        }
    }
    
    callback(contents);
};

fs.addSlash = function(path){
    if(path.length > 0 && path[path.length-1] !== '/'){
	return(path + '/');
    }else{
	return(path);
    }   
};

fs.removeSlash = function(path){
    if(path.length > 0 && path[path.length-1] === '/'){
	return(path.substr(0, path.length-1));
    }else{
	return(path);
    }   
};

fs.getFileName = function(path){
    return(path.split('/').pop());
};

return(fs);

}

exports.fs = lib;
