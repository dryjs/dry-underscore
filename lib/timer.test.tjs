
var _ = require('../');
var eq = _.test.eq;
var ok = _.test.ok;

function wait(ms, cb){ setTimeout(cb, ms); }

function test_timer(timer, cb){

    var time = timer.time("timeout", "one");

    await{ wait(10, defer()); }

    var margin = 15;

    var one_one_n = time();

    ok(_.within(one_one_n, 10, margin));
    await{ wait(10, defer()); }
    eq(time(), one_one_n);

    time = timer.time("timeout.two");
    await{ wait(10, defer()); }
    var two_one_n = time()
    ok(_.within(two_one_n , 10, margin));

    time = timer.time("timeout.two");
    await{ wait(30, defer()); }
    var two_two_n = time()
    ok(_.within(two_two_n, 30, margin));

    time = timer.time();
    await{ wait(10, defer()); }
    var un_cat_n = time()
    ok(_.within(un_cat_n, 10, margin));

    time = timer.time("foo");
    await{ wait(10, defer()); }
    var uncat_n = time()
    ok(_.within(uncat_n, 10, margin));

    time = timer.time();
    await{ wait(10, defer()); }
    var empty = time()
    ok(_.within(empty, 10, margin));


    eq(timer.times(), { uncategorized: { foo: [uncat_n] }, timeout: { "one": [one_one_n], "two": [two_one_n, two_two_n] } });

    eq(timer.times("timeout"), { "one": [one_one_n], "two": [two_one_n, two_two_n] });
    eq(timer.times("uncategorized"), { foo: [uncat_n] });
    eq(timer.times("no_exist"), {});


    eq(timer.times("timeout", "one"), [one_one_n]);
    eq(timer.times("timeout.one"), [one_one_n]);

    eq(timer.times("timeout", "two"), [two_one_n, two_two_n]);
    eq(timer.times("timeout.two"), [two_one_n, two_two_n]);

    cb();
}

test("timer", function(callback){

    // await{ test_timer(_.timer, defer()); }
    await{ test_timer(_.timer.make(), defer()); }
    await{ test_timer((new _.timer.class()), defer()); }

    callback();
});

test("timer_printer", function(callback){

    var last_message = null;
    var t = _.timer.make(function(message){ last_message = message; });

    var t = t.time("blah");

    await{ wait(20, defer()); }

    var n = t();

    eq(last_message, null);

    t("test_logger");

    eq(last_message, "test_logger: ", n + "ms");

    t("new_message");

    eq(last_message, "new_message: ", n + "ms");

    callback();
});
 
