
exports.mixin = function(_){

    function builder(options){
        options = options || {};

        this._clean = options.clean || false;
        
        this.paths = _.path.make();

        var cacheName = ".build";
        if(options.cache){
            cacheName = _.path.file(options.cache);
            this.paths.root(_.path.dir(options.cache), true);
        }else if(options.root){ this.paths.root(options.root, true); }

        this.paths.cache = this.paths.fun(this.paths.root, cacheName);
        
        this._cache = this._blankCache(); 
        this.stages = _.pipeline();
        this.stage = this.hook;

        this.measurer = _.measurer.make();
    }

    _.hook(builder.prototype);

    builder.prototype.clean = _.r("_clean");

    builder.prototype.run = function(callback){
        var self = this;
        var args = _.a(arguments);

        var callback = args.pop();

        if(!_.isFunction(callback)){ throw(_.exception("NoCallback", "You must provide a callback as the last argument.")); }

        self.measurer.measure("builder", "total");
        _.each.async(this.stages.order(), function(stage, i, next, done){
            self.measurer.measure("builder", stage);
 
            self.bite(stage, args, function(err){
                if(err){ return callback(err); }
                else{ 
                    self.measurer.measure("builder", stage);
                    return next();
                }
            });
        }, function(){
            self.measurer.measure("builder", "total");
            callback.apply(null, _.concat(null, args));
        });
    };

    builder.prototype.cache = function(key, value, setCache){
        if(key && setCache){
            this._cache.results[key] = value;
        }else if(key !== undefined){
            return(this._cache.results[key]);
        }else{
            return(this._cache);
        }
    };

    builder.prototype._blankCache = function(){
        return({ 
            last: 0,
            results: {}
        });
    };

    builder.prototype.last = function(){
        return(this._cache["last"]);
    };

    builder.prototype.load = function(callback){
        if(this._clean){
            this._cache = this._blankCache();
            return callback(null);
        }

        await{ _.fs.readFile(this.paths.cache(), defer(var err, data)); }
        if(err){
            if(_.code.noent(err)){ 
                this._cache = this._blankCache();
                return callback(null);
            }else{ 
                err.path = this.paths.cache();
                return callback(err);
            }
        }

        try{ this._cache = _.parse(data); }
        catch(e){ 
            e.path = this.paths.cache();
            return callback(e);
        }

        return callback(null);
    };

    builder.prototype.finished = function(){
        this._cache["last"] = _.timestamp();
    };

    builder.prototype.save = function(callback){
        await{ _.fs.writeFile(this.paths.cache(), _.stringify(this.cache()), callback); }
    };

    builder.prototype.build = function(path, buildFunction, callback){
        var file = {
            created: false,
            removed: false,
            exists: false,
            dirty: false,
            path: path
        };

        await{ _.fs.estat(path, _.plumb(defer(var exists, stat), callback)); }

        file.exists = exists;

        if(!file.exists){
            if(this.cache(path)){
                file.removed = true;
                file.dirty = true;
                delete this.cache().path;
            }
            return callback(null, file);
        }

        file.mtime = stat.mtime.getTime();

        if(!this.cache(path)){ file.created = true; }

        file.dirty = file.created || file.removed || file.mtime >= this.last();

        if(!file.dirty){
            return callback(null, file, this.cache(path));
        }else{
            await{ _.fs.readFile(path, _.plumb(defer(var data), callback)); }
            await{ buildFunction(file, data, _.plumb(defer(var result), callback)); }

            this.cache(path, result, true);

            callback(null, file, result);
        }
    };


    return(function(options){ return(new builder(options)); });
};




