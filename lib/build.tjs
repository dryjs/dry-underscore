
exports.mixin = function(_){

var build = {};

build.fileIsModule = function(path){
    var extensions = ["js", "tjs"];

    var pathChecker = _.partial(_.path.extension.is, path);

    return(_.any(extensions, pathChecker));
};

build.fetchModule = function(path, callback){
    var module = null;

    function errorMatchesPath(path, err){
        var matchPath = _.regex(_.path.base(path) + "'$");
        if(err.message && err.message.match && err.message.match(matchPath)){
            return(err.message.match(matchPath));
        }else{ return(false); }
    }
 
    try{ module = require(path); }
    catch(e){ 
        if(_.ecode.noEnt(e) && errorMatchesPath(path, e)){
            callback(null, module);
        }else if(_.ecode.moduleNotFound(e) && errorMatchesPath(path, e)){
            callback(null, module);
        }else{ 
            e.path = path;
            return callback(e);
        }
    }

    callback(null, module);
};

// if errors, callsback an array of errors
build.fetchModules = function(root, callback){

    await{ _.fs.files(root, defer(var err, files)); }

    if(err){ return callback([_.error("ReadDirectoryError", err.message, err)]); }

    var errors = []
    var modules = [];

    files = _.filter(files, build.fileIsModule);

    _.beach(files, function(path){
        try{ 
            modules.push({ module: require(path), path: path });
        }catch(e){ 
            e.path = path;
            errors.push(e);
        }
    });

    if(errors.length){
        callback(errors);
    }else{
        callback(null, modules);
    }
};
 
return(build);

};

