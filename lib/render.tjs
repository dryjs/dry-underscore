
exports.mixin = function(_){

    _.render.templateRoot = _.render.template_root = function(root){
        if(root){ _.render._template_root = root; }
        else{
            if(_.render._template_root){ return(_.render._template_root); }
            else{ return(""); }
        }
    };

    _.render.loadDirectory = _.render.load_directory = function(root_path){
        function pattern(info){
            var include = _.glob.match_file(info.name, "*.mu") || _.glob.match_file(info.name, "*.hb");
            return(include);
        }
        var files = _.fs.paths(_.fs.find.sync(root_path, { pattern : pattern }));

        _.each(files, function(file_path){
            _.render.load_file(file_path);
        });
    };

    _.render.loadFile = _.render.load_file = function(template_name, file_path){
        if(!file_path){
            file_path = template_name;
            template_name = _.path.file(template_name);
            template_name = template_name.replace(_.regex(".mu$"), "");
            template_name = template_name.replace(_.regex(".hb$"), "");
        }

        file_path = _.path.join(_.render.template_root(), file_path);;
        var template = _.fs.read_file.sync(file_path);
        if(template && template.length && template[template.length-1] == "\n"){
            template = template.substr(0, [template.length-1]);
        }
        return(_.render.compile(template_name, template));
    };

    _.render.file = function(path, hash, callback){

        function error_out(e){
            e = e || "";
            return callback(_.error("render_error", "There was a problem rendering a file: " + path, e));
        }

        function send_result(){
            try{ var result = _.render(path, hash); }
            catch(e){ return error_out(e); }
            return callback(null, result);
        }

        if(_.render.template(path)){ return send_result(); }

        _.fs.read_file(path, _.plumb(function(text){

            if(!_.render.template(path)){
                try{ _.render.compile(path, text); }
                catch(e){ return error_out(e); }
            }

            return send_result();

        }, callback));
    };

    _.render.file.sync = function(path, hash){

        if(_.render.template(path)){ 
            return _.render(path, hash);
        }

        var template = _.fs.read_file.sync(path);
        _.render.compile(path, template);

        return _.render(path, hash);
    }

    _.render.folder = function(src, dest, hash, ignore_file, process_file_name, callback){

        await {
            _.fs.files(src, _.plumb(defer(var contents), callback));
            _.fs.mkdir(dest, _.plumb(defer(), callback));
        } 


        function new_name(file_name, file_info){
            var processed_name = process_file_name(file_name, file_info);
            return(processed_name || file_name);
        }

        _.each.async(contents, function(file_info, index, next){

            if(ignore_file(file_info)){ return next(); }

            var file_name = file_info.name;

            var mu = _.regex("\.mu$");
            var hb = _.regex("\.hb$");

            if(file_name.match(mu) || file_name.match(hb)){
                // render file

                file_name = file_name.replace(mu, "");
                file_name = file_name.replace(hb, "");

                file_name = new_name(file_name, file_info);

                await{ _.render.file(file_info.path, hash, _.plumb(defer(var str), callback)); }
                await{ _.fs.write_file(_.path.join(dest, file_name), str, _.plumb(defer(), callback)); }

            }else{
                // copy file
                
                file_name = new_name(file_name, file_info);

                await{ _.fs.read_file(file_info.path, _.plumb(defer(var str), callback)); }
                await{ _.fs.write_file(_.path.join(dest, file_name), str, _.plumb(defer(), callback)); }
            }

            next();

        }, function(){

            await{ _.fs.directories(src, _.plumb(defer(var contents), callback)); }

            _.each.async(contents, function(dir_info, index, next){

                await{ _.fs.mkdir(_.path.join(dest, dir_info.name), _.plumb(defer(), callback)); }
                await{ _.render.folder(_.path.join(src, dir_info.name), _.path.join(dest, dir_info.name), hash, ignore_file, process_file_name, _.plumb(defer(), callback)); }

                next();

            }, callback);
        });
    };
};




