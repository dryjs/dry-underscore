"use strict";

function lib(_){

var npm = {
    log : _.log
};

npm.mock = {
    on: false,
    root: "",
    log: npm.log.child({ ns: 'npm mock registry', level: 'info' })
};

npm.mock.install = function(workingRoot, packageName, packageString, callback){

    await{ _.fs.exists(_.path.join(npm.mock.root, packageString), _.plumb(defer(var exists), callback)); }

    if(exists){ 
        var fromPath = _.path.join(npm.mock.root, packageString);
        var toPath = _.path.join(workingRoot, packageName);
        npm.mock.log.debug("loading: ", packageString, " from mock registry.");
        npm.mock.log.debug("from path: ", fromPath);
        npm.mock.log.debug("to path: ", toPath);
        await{ _.fs.symlink(fromPath, toPath, defer(var lnerr)); }
        if(lnerr){ npm.mock.log.error("ln -s err: ", lnerr); return callback(lnerr); }
    }else{
        npm.mock.log.debug("loading: ", packageString, " from npm registry");
        await{ _.npm.exec(_.concat(args, packageString), options, _.plumb(defer(), callback)); }
    }

    callback(null);
};

npm.install = function(packages, options, callback){

    if(_.isFunction(options)){
        callback = options;
        options = packages;
        packages = null;
    }

    var args = [];

    if(!options.link){ args.push("install"); }
    else{ options.push("link"); }

    if(options.verbose){ args.push("-verbose"); }

    var workingRoot = options.root;

    if(options.root){ 
        if(_.path.base(workingRoot) !== "node_modules"){
            workingRoot = _.path.join(workingRoot, "node_modules");
        }
        await{ _.fs.mkdir(workingRoot, _.plumb(defer(), callback)); }
        args.push("--prefix");
        args.push(options.root);
    } 

    if(!options.root){ return callback(_.exception("NoRoot", "Using npm.install without a root. Bad news, you can't. You want cwd, use { root: _.path.cwd() }")); }

    if(npm.mock.on){ npm.mock.log.info("IS ON!!!"); }

    if(!_.keys(packages).length){ 

        if(!npm.mock.on){ return _.npm.exec(args, options, callback); }
        
        npm.mock.log.debug("install using local package.json. start search in: ", options.root);
        await{ npm.dependencies(options.root, _.plumb(defer(var dependencies, pathToPackageFile), callback)); }
        npm.mock.log.debug("used package.json file: ", pathToPackageFile);
        npm.mock.log.debug("packages to install: ", dependencies);

        packages = dependencies;
    }

    _.each.async(packages, function(packageVersion, packageName, next, done){
        var packageString =  packageVersion ? packageName + "@" + packageVersion : packageName;

        if(npm.mock.on){
            await{ npm.mock.install(workingRoot, packageName, packageString, _.plumb(defer(), callback)); }
        }else{
            await{ _.npm.exec(_.concat(args, packageString), options, _.plumb(defer(), callback)); }
        }

        // never gets here on error, plumb is like throw
        next();

    }, function(){ callback(null); });

};

npm.dependencies = function(root, callback){

    await{ _.fs.findInParents(root, "package.json", _.plumb(defer(var path), callback)); }
    if(!path){ return callback(_.error("CantFindPackageFile", "Problem finding package.json file. It probably doesn't exist. Started search at: " + root)); }

    await{ _.fs.readJsonFile(_.path.join(path, "package.json"), defer(var err, data)); }
    if(err){ return callback(_.error("CantReadPackageFile", "Problem reading package.json file. Probably parse error, or permission problem.", err)); }
    if(!data || !data.dependencies){ return callback(_.error("NoDependencies", "Problem reading package.json file. There is no dependencies section.")); }

    return callback(null, data.dependencies, _.path.join(path, "package.json"));
};

npm.exec = function(args, options, callback){
    await{ _.exec("npm", args, defer(var code, stderr, stdout), options.shell); }
    if(code){ return callback(_.error("NpmError", "Error spawning npm, exit code: " + code, { exitCode: code, stderr: stderr, stdout: stdout })); }
    else{ return callback(null); }
};

return(npm);

}

exports.npm = lib;
