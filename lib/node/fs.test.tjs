"use strict";

var fs = require('fs');

/*
require('blanket')({
    pattern: function (filename) {
        return !(new RegExp("node_modules")).test(filename);
    }
});
*/

var _ = require('../');
var eq = _.test.eq;
var ok = _.test.ok;
var same = _.test.same;
var throws = _.test.throws;

var data = _.path.fun(_.path.normalize(__dirname + "/zandbox/fs-data/"));
var parent = _.path.fun(data("parent"));
var testTemplateDir = _.path.normalize(__dirname + "/zandbox/fs-templates/");
var moduleData = _.path.fun(_.path.normalize(__dirname + "/zandbox/module-data/"));

suite('fs');

function sort_by_name(a){
    a.sort(function(a, b){
        if(a.name > b.name){ return(1); }
        else if(a.name < b.name){ return(-1); }
        else if(a.name == b.name){ return(0); }
    });
}

var parent_directories = ['child', 'child.link', 'empty'];
var parent_files = ['parent.file'];

function expected_directories(results){
    sort_by_name(results);
    eq(_.pluck(results, "name"), parent_directories);
    _.each(results, function(r){ ok(r.stat.isDirectory()); });
}

function expected_files(results){
    sort_by_name(results);
    eq(_.pluck(results, "name"), parent_files);
    _.each(results, function(r){ ok(!r.stat.isDirectory()); });
}

test('directories', function(callback){

    await{ _.fs.directories(data("parent"), _.plumb(defer(var results), callback)); }
    expected_directories(results);

    await{ _.fs.directories(parent("parent.file"), defer(var err, undef)); }
    ok(_.code.notdir(err));
    eq(undef, undefined);
 
    callback();
});

test('directories.sync', function(){

    var results = _.fs.directories.sync(data("parent"));
    expected_directories(results);

    throws(function(){
        _.fs.directories.sync(parent("parent.file"));
    });

    throws(function(){
        _.fs.directories.sync(parent("parent.file.doesnotexist"));
    });
});

test('files', function(callback){

    await{ _.fs.files(data("parent"), _.plumb(defer(var results), callback)); }
    expected_files(results);

    await{ _.fs.files(parent("parent.file"), defer(var err, undef)); }
    ok(_.code.notdir(err));
    eq(undef, undefined);
 
    callback();
});

test('files.sync', function(){

    var results = _.fs.files.sync(data("parent"));
    expected_files(results);

    throws(function(){
        _.fs.files.sync(parent("parent.file"));
    });

    throws(function(){
        _.fs.files.sync(parent("parent.file.doesnotexist"));
    });
});

test('links', function(callback){
    await{ _.fs.links(data("parent"), _.plumb(defer(var results), callback)); }
    same(_.fs.names(results), ["child.link"]);
    callback();
});

test('links.sync', function(){
    var results = _.fs.links.sync(data("parent"));
    same(_.fs.names(results), ["child.link"]);
});

var all_file_paths = [
    './parent/parent.file',
    './parent/child/child.file',
    './parent/child/child.directory/child.directory.file',
    './parent/child/child.directory/parent/.keep',
    './parent/child.link/child.file',
    './parent/child.link/child.directory/child.directory.file',
    './parent/child.link/child.directory/parent/.keep'
];

var linked_file_paths = [
    './parent/parent.file',
    './parent/child/child.file',
    './parent/child/child.directory/child.directory.file',
    './parent/child/child.directory/parent/.keep',
    './parent/child.link',
];

var all_directory_paths = [
    './parent',
    './parent/child',
    './parent/child/child.directory',
    './parent/child/child.directory/parent',
    './parent/empty',
    './parent/child.link',
    './parent/child.link/child.directory',
    './parent/child.link/child.directory/parent',
];

var linked_directory_paths = [
    './parent',
    './parent/child',
    './parent/child/child.directory',
    './parent/child/child.directory/parent',
    './parent/empty'
];

function abs(paths){ return(_.map(paths, function(val){ return(_.path.normalize(data(val))); })); }

var all_directory_paths_abs = abs(all_directory_paths);
var all_file_paths_abs = abs(all_file_paths);

var linked_directory_paths_abs = abs(linked_directory_paths);
var linked_file_paths_abs = abs(linked_file_paths);

test("walk", function(callback){

    var found_dirs = []; 
    var found_files = []; 

    _.fs.walk(data(), function on_file(info, next){
        found_files.push(info.path);
        ok(!info.stat.isDirectory());
        next();
    }, function on_dir(info, next){
        found_dirs.push(info.path);
        ok(info.stat.isDirectory());
        next();
    }, function(err){
        if(err){ throw(err); }
        same(found_dirs, all_directory_paths_abs);
        same(found_files, all_file_paths_abs);
        callback();
    });
});

test("walk lstat", function(callback){

    var found_dirs = []; 
    var found_files = []; 

    _.fs.walk(data(), { lstat: true }, function on_file(info, next){
        found_files.push(info.path);
        ok(!info.stat.isDirectory());
        next();
    }, function on_dir(info, next){
        found_dirs.push(info.path);
        ok(info.stat.isDirectory());
        next();
    }, function(err){
        if(err){ throw(err); }
        same(found_dirs, linked_directory_paths_abs);
        same(found_files, linked_file_paths_abs);
        callback();
    });
});

test("walk prune", function(callback){

    var found_dirs = []; 
    var found_files = []; 

    _.fs.walk(data(), function on_file(info, next){
        found_files.push(info.name);
        ok(!info.stat.isDirectory());
        next();
    }, function on_dir(info, next){
        found_dirs.push(info.name);
        ok(info.stat.isDirectory());
        next(false);
    }, function(err){
        if(err){ throw(err); }
        same(found_dirs, ["parent"]);
        same(found_files, []);
        callback();
    });
});

test("walk.sync", function(){

    var found_dirs = []; 
    var found_files = []; 

    _.fs.walk.sync(data(), function on_file(info){
        found_files.push(info.path);
        ok(!info.stat.isDirectory());
    }, function on_dir(info){
        found_dirs.push(info.path);
        ok(info.stat.isDirectory());
    });

    same(found_dirs, all_directory_paths_abs);
    same(found_files, all_file_paths_abs);
});

test("walk.sync lstat", function(){

    var found_dirs = []; 
    var found_files = []; 

    _.fs.walk.sync(data(), { lstat: true }, function on_file(info){
        found_files.push(info.path);
        ok(!info.stat.isDirectory());
    }, function on_dir(info){
        found_dirs.push(info.path);
        ok(info.stat.isDirectory());
    });

    same(found_dirs, linked_directory_paths_abs);
    same(found_files, linked_file_paths_abs);
});

test("walk.sync prune", function(){

    var found_dirs = []; 
    var found_files = []; 

    _.fs.walk.sync(data(), function on_file(info){
        found_files.push(info.name);
        ok(!info.stat.isDirectory());
    }, function on_dir(info){
        found_dirs.push(info.name);
        ok(info.stat.isDirectory());
        return(false);
    });

    same(found_dirs, ["parent"]);
    same(found_files, []);
});

var find_file_paths = [
    './parent/parent.file',
    './parent/child/child.file',
    './parent/child.link/child.file',
    './parent/child/child.directory/child.directory.file',
    './parent/child.link/child.directory/child.directory.file',
];

test('find', function(callback){
    var expected = abs(find_file_paths);

    _.fs.find(data(), "*.file", function(err, results){
        results = _.fs.paths(results);
        same(expected, results);
        callback();
    });
});

test('find.sync', function(){
    var expected = abs(find_file_paths);

    var results = _.fs.find.sync(data(), "*.file");
    results = _.fs.paths(results);

    same(expected, results);
});

function prune_function(info){ return(info.name === "child" || info.name === "child.link"); }

test('find prune', function(callback){
    var expected = abs(["./parent/parent.file"]);

    _.fs.find(data(), { pattern: "*.file", ignore: prune_function  } , function(err, results){
        results = _.fs.paths(results);
        same(expected, results);
        callback();
    });
});

test('find.sync prune', function(){
    var expected = abs(["./parent/parent.file"]);

    var results = _.fs.find.sync(data(), { pattern: "*.file", ignore: prune_function });
    results = _.fs.paths(results);

    same(expected, results);
});

test("mkdir rmdir", function(callback){

    _.fs.rmdir.sync(data('async'));
    _.fs.rmdir.sync(data('async_link_test'));

    await{ _.fs.mkdir(data('async/make/tree/'), _.plumb(defer(), callback)); }
    eq(true, _.fs.exists.sync(data('async/make/tree')));

    await{ _.fs.rmdir(data('async/make/tree'), _.plumb(defer(), callback)); }
    eq(false, _.fs.exists.sync(data('async/make/tree')));    
    eq(true, _.fs.exists.sync(data('async/make')));

    await{ _.fs.rmdir(data('async'), _.plumb(defer(), callback)); }
    eq(false, _.fs.exists.sync(data('async')));    

    // test no error, this directory exists
    await{ _.fs.mkdir(data('parent/child/'), _.plumb(defer(), callback)); }

    // ensure we don't delete linked files, only the links
    await{ _.fs.mkdir(data('async_link_test/child/'), _.plumb(defer(), callback)); }
    await{ _.fs.mkdir(data('async_link_test/keep/'), _.plumb(defer(), callback)); }
    await{ _.fs.write_file(data('async_link_test/keep/keep.file'), "keep.file",  _.plumb(defer(), callback)); }
    await{ _.fs.symlink(data('async_link_test/keep/'), data('async_link_test/child/keep.link'), _.plumb(defer(), callback)); }

    eq(true, _.fs.exists.sync(data('async_link_test/child/keep.link/keep.file')));

    await{ _.fs.rmdir(data('async_link_test/child'), _.plumb(defer(), callback)); }

    eq(false, _.fs.exists.sync(data('async_link_test/child')));
    eq(true, _.fs.exists.sync(data('async_link_test/keep/keep.file')));

    await{ _.fs.rmdir(data('async_link_test'), _.plumb(defer(), callback)); }

    _.fs.rmdir.sync(data('async_link_test'));
    eq(false, _.fs.exists.sync(data('async_link_test')));

    callback(null);
});

test("mkdir rmdir sync", function(){

    _.fs.rmdir.sync(data('sync'));
    _.fs.rmdir.sync(data('sync_link_test'));

    _.fs.mkdir.sync(data('sync/make/tree/'));
    eq(true, _.fs.exists.sync(data('sync/make/tree/')));

    _.fs.rmdir.sync(data('sync/make/tree'));
    eq(false, _.fs.exists.sync(data('sync/make/tree')));    
    eq(true, _.fs.exists.sync(data('sync/make')));    

    _.fs.mkdir.sync(data('sync/make/tree/'));
    eq(true, _.fs.exists.sync(data('sync/make/tree')));    

    _.fs.rmdir.sync(data('sync'));
    eq(false, _.fs.exists.sync(data('sync')));    

    // test no error, this directory exists
    _.fs.mkdir.sync(data('parent/child/'));

    // ensure we don't delete linked files, only the links
    _.fs.mkdir.sync(data('sync_link_test/child/'));
    _.fs.mkdir.sync(data('sync_link_test/keep/'));
    _.fs.write_file.sync(data('sync_link_test/keep/keep.file'), "keep.file");
    _.fs.symlink.sync(data('sync_link_test/keep/'), data('sync_link_test/child/keep.link'));

    eq(true, _.fs.exists.sync(data('sync_link_test/child/keep.link/keep.file')));

    _.fs.rmdir.sync(data('sync_link_test/child'));

    eq(false, _.fs.exists.sync(data('sync_link_test/child')));
    eq(true, _.fs.exists.sync(data('sync_link_test/keep/keep.file')));

    _.fs.rmdir.sync(data('sync_link_test'));
    eq(false, _.fs.exists.sync(data('sync_link_test')));

});

test("parse / write json ", function(callback){

    var path = data("test.async.json");

    try{ _.fs.rm.sync(path); }catch(e){}

    var written = { async: true, a: "a", b: "b", "one": 1 };

    await{ _.fs.write_json(path, written, _.plumb(defer(), callback)); }

    await{ _.fs.read_json(path, _.plumb(defer(var read), callback)); }
    await{ _.fs.eval_file(path, _.plumb(defer(var read_eval), callback)); }

    eq(written, read);
    eq(written, read_eval);

    _.fs.rm.sync(path);

    callback();
});

test("parse / write json ", function(){

    var path = data("test.sync.json");

    try{ _.fs.rm.sync(path); }catch(e){}

    var written = { sync: true, a: "a", b: "b", "one": 1 };

    _.fs.write_json.sync(path, written);

    var read = _.fs.read_json.sync(path);
    var read_eval = _.fs.eval_file.sync(path);

    eq(written, read);
    eq(written, read_eval);

    _.fs.rm.sync(path);
});

test('mtime', function(callback){
    _.fs.mtime(data('/parent/parent.file'), function(err, mtime){
        ok(!err);
        ok(mtime);
        callback();
    });
});

test("move_files", function(callback){
    
    var files = [data('mv1.txt'), data('mv2.txt'), data('mv3.txt')];

    var dest_root = _.path.fun(data('mv_test/'));
    
    _.fs.mkdir.sync(dest_root());

    var move_info = _.map(files, function(file_path){
        _.fs.write_file.sync(file_path, file_path);
        return({ src : file_path, dest : dest_root(_.path.file(file_path)) });
    });
    
    await{ _.fs.move_files(move_info, _.plumb(defer(), callback)); }

    _.each(move_info, function(info){
        eq(false, _.fs.file_exists.sync(info.src));
        eq(info.src, _.fs.read_file.sync(info.dest));
    });

    _.fs.rmdir.sync(dest_root());

    callback();
});

test("is_directory", function(callback){

    eq(_.fs.is_directory.sync(data('parent')), true);
    eq(_.fs.is_directory.sync(data('does-not-exist')), false);
    eq(_.fs.is_directory.sync(data('parent/child/child.file')), false);

    var is_dir = false;

    await{ _.fs.is_directory(data('parent'), _.plumb(defer(is_dir), callback)); }
    eq(is_dir, true);

    await{ _.fs.is_directory(data('parent/child/child.file'), _.plumb(defer(is_dir), callback)); }
    eq(is_dir, false);
 
    await{ _.fs.is_directory(data('does-not-exist'), _.plumb(defer(is_dir), callback)); }
    eq(is_dir, false);
 
    callback();
});

test("is_file", function(callback){

    eq(_.fs.is_file.sync(data('parent')), false);
    eq(_.fs.is_file.sync(data('does-not-exist')), false);
    eq(_.fs.is_file.sync(data('parent/child/child.file')), true);

    var is_file = false;

    await{ _.fs.isFile(data('parent'), _.plumb(defer(is_file), callback)); }
    eq(is_file, false);

    await{ _.fs.isFile(data('parent/child/child.file'), _.plumb(defer(is_file), callback)); }
    eq(is_file, true);
 
    await{ _.fs.isFile(data('does-not-exist'), _.plumb(defer(is_file), callback)); }
    eq(is_file, false);
 
    callback();
});

test("is_empty", function(callback){

    _.fs.mkdir.sync(data('parent/empty/'));

    eq(false, _.fs.is_directory_empty.sync(data("parent/")));
    
    eq(true, _.fs.is_directory_empty.sync(data("parent/empty/")));
    
    throws(function(){
        _.fs.is_directory_empty.sync(data("parent/empty/does_not_exist"));
    });

    var err = null; 
    var empty = null;

    await{ _.fs.is_directory_empty(data("parent/does_not_exist"), defer(err, empty)); }
    ok(err);
    eq(empty, undefined);
    
    await{ _.fs.is_directory_empty(data("parent/"), _.plumb(defer(empty), callback)); }
    eq(empty, false);
    
    await{ _.fs.is_directory_empty(data("parent/empty/"), _.plumb(defer(empty), callback)); }
    eq(empty, true);
    
    callback();
});

test("directoryContains", function(callback){

    eq(_.fs.directory_contains.sync(data("parent/"), "parent.file"), true);
    eq(_.fs.directory_contains.sync(data("parent/"), "parent.file", false), true);
    eq(_.fs.directory_contains.sync(data("parent/"), "parent.file", true), true);
    eq(_.fs.directory_contains.sync(data("parent/"), "Parent.file", true), false);
    eq(_.fs.directory_contains.sync(data("parent/"), "Parent.file", false), true);
    eq(_.fs.directory_contains.sync(data("parent/"), "parent.file.doesnotexist"), false);
    eq(_.fs.directory_contains.sync(data("parent/"), "parent.file.doesnotexist", false), false);
    eq(_.fs.directory_contains.sync(data("parent/"), "parent.file.doesnotexist", true), false);
    eq(_.fs.directory_contains.sync(data("parent/"), "Parent.file.doesnotexist", true), false);
    eq(_.fs.directory_contains.sync(data("parent/"), "parent.file.doesnotexist", false), false);
    
    // --------------------------------------
    
    var exists = null;

    await{ _.fs.directory_contains(data("parent/"), "parent.file", _.plumb(defer(exists), callback)); }
    eq(exists, true);
    
    await{ _.fs.directory_contains(data("parent/"), "parent.file", false, _.plumb(defer(exists), callback)); }
    eq(exists, true);
    
    await{ _.fs.directory_contains(data("parent/"), "parent.file", true, _.plumb(defer(exists), callback)); }
    eq(exists, true);
    
    await{ _.fs.directory_contains(data("parent/"), "Parent.file", true, _.plumb(defer(exists), callback)); }
    eq(exists, false);
    
    await{ _.fs.directory_contains(data("parent/"), "Parent.file", false, _.plumb(defer(exists), callback)); }
    eq(exists, true);
    
    await{ _.fs.directory_contains(data("parent/"), "parent.file.doesnotexist", _.plumb(defer(exists), callback)); }
    eq(exists, false);
    
    await{ _.fs.directory_contains(data("parent/"), "parent.file.doesnotexist", false, _.plumb(defer(exists), callback)); }
    eq(exists, false);
    
    await{ _.fs.directory_contains(data("parent/"), "parent.file.doesnotexist", true, _.plumb(defer(exists), callback)); }
    eq(exists, false);
    
    await{ _.fs.directory_contains(data("parent/"), "Parent.file.doesnotexist", true, _.plumb(defer(exists), callback)); }
    eq(exists, false);
    
    await{ _.fs.directory_contains(data("parent/"), "parent.file.doesnotexist", false, _.plumb(defer(exists), callback)); }
    eq(exists, false);
    
    callback();
});

test("find_in_parents", function(callback){
        
    eq(data("parent"), _.fs.find_in_parents.sync(data("parent/child/child.directory/"), "parent.file"));
    eq(data("parent"), _.fs.find_in_parents.sync(data("parent/child/child.directory/"), "child"));
    
    eq("", _.fs.find_in_parents.sync(data("parent/child/child.directory/"), "parent.file.does_not_exist"));
        
    throws(function(){
        eq("", _.fs.find_in_parents.sync(data("parent/child/child.directory/does_not_exist/"), "parent.file.does_not_exist"));
    });
    
    var err = null; var path = null;
    await{ _.fs.find_in_parents(data("parent/child/child.directory/does_not_exist/"), "parent.file", defer(err, path)); }
    ok(err);
    eq(undefined, path);
        
    await{ _.fs.find_in_parents(data("parent/child/child.directory/"), "parent.file", defer(err, path)); }
    ok(!err);
    eq(data("parent/"), path);
    
    await{ _.fs.find_in_parents(data("parent/child/child.directory/"), "child", defer(err, path)); }
    ok(!err);
    eq(data("parent/"), path);
 
    await{ _.fs.find_in_parents(data("parent/child/child.directory/"), "parent.file.does_not_exist", defer(err, path)); }
    ok(!err);
    eq(path, null);
    
    callback();
});

test('module', function(callback){

    var err = null;
    var mod = null;

    // await{ _.fs.module(moduleData("bad", "bad-global.tjs"), defer(var err, mod)); }

    await{ _.fs.module(moduleData("not-there", "not-there.tjs"), defer(err, mod)); }
    eq(err, null);
    eq(mod, null);

    await{ _.fs.module(moduleData("bad", "bad-global.tjs"), defer(err, mod)); }
    ok(err);
    eq(mod, undefined);

    await{ _.fs.module(moduleData("bad", "bad-relative.tjs"), defer(err, mod)); }
    ok(err);
    eq(mod, undefined);

    await{ _.fs.module(moduleData("bad", "bad-abs.tjs"), defer(err, mod)); }
    ok(err);
    eq(mod, undefined);

    await{ _.fs.module(moduleData("bad"), defer(err, mod)); }
    eq(err, null);
    eq(mod, null);

    await{ _.fs.module(moduleData("badpath"), defer(err, mod)); }
    eq(err, null);
    eq(mod, null);
    
    await{ _.fs.module("badpath", defer(err, mod)); }
    eq(err, null);
    eq(mod, null);

    await{ _.fs.module(moduleData("good", "one.tjs"), defer(err, mod)); }
    eq(err, null);
    eq(mod, {value:'one'});

    await{ _.fs.module(moduleData("good", "two.js"), defer(err, mod)); }
    eq(err, null);
    eq(mod, {value:'two'});

    callback();

});

test('modules', function(callback){

    var err = null;
    var mods = null;

    await{ _.fs.modules(moduleData("good"), defer(err, mods), ['js', 'tjs']); }
    eq(err, null);
    eq(mods.length, 2);

    mods = _.map(mods, function(m){ return(m.module); });
    mods.sort(function(a, b){
        if(a.value < b.value){ return(-1); }
        else{ return(1); }
    });
    eq(mods, [{value:'one'}, {value:'two'}]);

    callback();
});

test('modules hidden', function(callback){

    var err = null;
    var mods = null;

    await{ _.fs.modules(moduleData("good"), defer(err, mods), { hidden: true }); }
    eq(err, null);
    eq(mods.length, 3);

    mods = _.map(mods, function(m){ return(m.module); });
    mods.sort(function(a, b){
        if(a.value < b.value){ return(-1); }
        else{ return(1); }
    });

    eq(mods, [{value: "hidden"}, {value:'one'}, {value:'two'}]);

    callback();
});

